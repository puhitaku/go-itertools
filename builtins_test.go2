package main

import (
	"fmt"
	"math/rand"
	"reflect"
	"testing"
	"time"

	"github.com/puhitaku/go2-itertools/itertools"
)

func TestBuiltins(t *testing.T) {
	t.Run("All", testAll)
	t.Run("Any", testAny)
	t.Run("Enumerate", testEnumerate)
	t.Run("Filter", testFilter)
	t.Run("Map", testMap)
	t.Run("Min", testMin)
	t.Run("Max", testMax)
	t.Run("Range", testRange)
	t.Run("Reversed", testReversed)
	t.Run("Sorted", testSorted)
	t.Run("Sum", testSum)
	t.Run("Zip", testZip)
	rand.Seed(time.Now().UnixNano())
	random = true
	t.Run("Zip (randomized)", testZip)
}

var random bool

func C[T any](s []T) <-chan T {
	c := make(chan T)

	go func(){
		defer close(c)
		for i := range(s) {
			c <- s[i]
			if random {
				time.Sleep(time.Duration(rand.Intn(10)) * time.Millisecond)
			}
		}
	}()

	return c
}

func testAll(t *testing.T) {
	s1, s2, s3 := []bool{true, true}, []bool{true, false}, []bool{false, false}
	output := []bool{itertools.All(s1), itertools.All(s2), itertools.All(s3)}
	expect := []bool{true, false, false}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	output = []bool{itertools.AllC(itertools.C(s1)), itertools.AllC(itertools.C(s2)), itertools.AllC(itertools.C(s3))}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testAny(t *testing.T) {
	s1, s2, s3 := []bool{true, true}, []bool{true, false}, []bool{false, false}
	output := []bool{itertools.Any(s1), itertools.Any(s2), itertools.Any(s3)}
	expect := []bool{true, true, false}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	output = []bool{itertools.AnyC(itertools.C(s1)), itertools.AnyC(itertools.C(s2)), itertools.AnyC(itertools.C(s3))}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testEnumerate(t *testing.T) {
	s := []string{"a", "b", "c"}
	output := itertools.S(itertools.EnumerateC(itertools.C(s)))
	expect := []itertools.Tuple2[int, string]{
		{V1: 0, V2: "a"},
		{V1: 1, V2: "b"},
		{V1: 2, V2: "c"},
	}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testFilter(t *testing.T) {
	s := []int{0, 1, 2, 3, 4, 5}
	output := itertools.Filter(func(v int) bool { return v%2 == 0 }, s)
	expect := []int{0, 2, 4}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	output = itertools.S(itertools.FilterC(func(v int) bool { return v%2 == 0 }, itertools.C(s)))

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

}

func testMap(t *testing.T) {
	s := []int{0, 1, 2, 3, 4, 5}
	output := itertools.Map(func(v int) string { return fmt.Sprint(v*2) }, s)
	expect := []string{"0", "2", "4", "6", "8", "10"}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	output = itertools.S(itertools.MapC(func(v int) string { return fmt.Sprint(v*2) }, itertools.C(s)))

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

}

func testMin(t *testing.T) {
	s := []int{1, 2, -1, 999, -4, 0}

	output := itertools.Min(s...)
	expect := -4

	if output != expect {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	outputc := itertools.MinC(itertools.C([]int{}))

	if outputc != nil {
		t.Fatalf("the result did not match with the expected slice: expect=(nil), actual=%v", outputc)
	}

	outputc = itertools.MinC(itertools.C(s))

	if *outputc != expect {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, *outputc)
	}

	output = itertools.MinFromIterable(s)

	if output != expect {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testMax(t *testing.T) {
	s := []int{1, 2, -1, 999, -4, 0}

	output := itertools.Max(s...)
	expect := 999

	if output != expect {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	outputc := itertools.MaxC(itertools.C([]int{}))

	if outputc != nil {
		t.Fatalf("the result did not match with the expected slice: expect=(nil), actual=%v", outputc)
	}

	outputc = itertools.MaxC(itertools.C(s))

	if *outputc != expect {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, *outputc)
	}

	output = itertools.MaxFromIterable(s)

	if output != expect {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testZip(t *testing.T) {
	s1, s2, s3, s4 := []int{1, 2}, []int{2, 3, 4, 5}, []int{9, 8, 7, 6, 5}, []int{0, -1, -2}
	c1, c2, c3, c4 := C(s1), C(s2), C(s3), C(s4)

	prepare := func() {
		c1, c2, c3 = itertools.C(s1), itertools.C(s2), itertools.C(s3)
	}

	// Zip2C
	z2c := itertools.Zip2C(c1, c2)
	expect := [][]int{{1, 2}, {2, 3}}

	v1, v2 := []int{}, []int{}
	for t := range z2c {
		v1, v2 = append(v1, t.V1), append(v2, t.V2)
	}

	output := [][]int{v1, v2}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Zip2
	z2 := itertools.Zip2(s1, s2)

	v1, v2 = []int{}, []int{}
	for _, t := range z2 {
		v1, v2 = append(v1, t.V1), append(v2, t.V2)
	}

	output = [][]int{v1, v2}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Zip3C
	prepare()
	z3c := itertools.Zip3C(c1, c2, c3)
	expect = [][]int{{1, 2}, {2, 3}, {9, 8}}

	v1, v2, v3 := []int{}, []int{}, []int{}
	for t := range z3c {
		v1, v2, v3 = append(v1, t.V1), append(v2, t.V2), append(v3, t.V3)
	}

	output = [][]int{v1, v2, v3}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Zip3
	z3 := itertools.Zip3(s1, s2, s3)
	expect = [][]int{{1, 2}, {2, 3}, {9, 8}}

	v1, v2, v3 = []int{}, []int{}, []int{}
	for _, t := range z3 {
		v1, v2, v3 = append(v1, t.V1), append(v2, t.V2), append(v3, t.V3)
	}

	output = [][]int{v1, v2, v3}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Zip4C
	prepare()
	z4c := itertools.Zip4C(c1, c2, c3, c4)
	expect = [][]int{{1, 2}, {2, 3}, {9, 8}, {0, -1}}

	v1, v2, v3, v4 := []int{}, []int{}, []int{}, []int{}
	for t := range z4c {
		v1, v2, v3, v4 = append(v1, t.V1), append(v2, t.V2), append(v3, t.V3), append(v4, t.V4)
	}

	output = [][]int{v1, v2, v3, v4}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Zip4
	z4 := itertools.Zip4(s1, s2, s3, s4)
	expect = [][]int{{1, 2}, {2, 3}, {9, 8}, {0, -1}}

	v1, v2, v3, v4 = []int{}, []int{}, []int{}, []int{}
	for _, t := range z4 {
		v1, v2, v3, v4 = append(v1, t.V1), append(v2, t.V2), append(v3, t.V3), append(v4, t.V4)
	}

	output = [][]int{v1, v2, v3, v4}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testRange(t *testing.T) {
	// Range

	// Invalid step
	output := itertools.Range(0, 5, 0)
	expect := []int{}

	if len(output) != 0 {
		t.Fatalf("the result did not match with the expected slice: expect=[], actual=%v", output)
	}

	// Positive 1 step
	output = itertools.Range(0, 5, 1)
	expect = []int{0, 1, 2, 3, 4}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Positive 2 step #1
	output = itertools.Range(0, 5, 2)
	expect = []int{0, 2, 4}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Positive 2 step #2
	output = itertools.Range(1, 5, 2)
	expect = []int{1, 3}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Negative 1 step
	output = itertools.Range(5, 0, -1)
	expect = []int{5, 4, 3, 2, 1}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Negative 2 step #1
	output = itertools.Range(5, 0, -2)
	expect = []int{5, 3, 1}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Negative 2 step #2
	output = itertools.Range(4, 0, -2)
	expect = []int{4, 2}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// RangeC

	// Invalid step
	output = itertools.S(itertools.RangeC(0, 5, 0))
	expect = []int{}

	if len(output) != 0 {
		t.Fatalf("the result did not match with the expected slice: expect=[], actual=%v", output)
	}

	// Positive 1 step
	output = itertools.S(itertools.RangeC(0, 5, 1))
	expect = []int{0, 1, 2, 3, 4}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Positive 2 step #1
	output = itertools.S(itertools.RangeC(0, 5, 2))
	expect = []int{0, 2, 4}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Positive 2 step #2
	output = itertools.S(itertools.RangeC(1, 5, 2))
	expect = []int{1, 3}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Negative 1 step
	output = itertools.S(itertools.RangeC(5, 0, -1))
	expect = []int{5, 4, 3, 2, 1}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Negative 2 step #1
	output = itertools.S(itertools.RangeC(5, 0, -2))
	expect = []int{5, 3, 1}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	// Negative 2 step #2
	output = itertools.S(itertools.RangeC(4, 0, -2))
	expect = []int{4, 2}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testReversed(t *testing.T) {
	s := []int{0, 1, 2, 3, 4, 5}
	output := itertools.Reversed(s)
	expect := []int{5, 4, 3, 2, 1, 0}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	output = itertools.S(itertools.ReversedC(itertools.C(s)))

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testSorted(t *testing.T) {
	s := []int{0, 3, 1, -19, 9, 2}
	output := itertools.Sorted(s)
	expect := []int{-19, 0, 1, 2, 3, 9}

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}

	output = itertools.S(itertools.SortedC(itertools.C(s)))

	if !reflect.DeepEqual(output, expect) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", expect, output)
	}
}

func testSum(t *testing.T) {
	s1 := []int{1, 2, 3}
	r1 := itertools.Sum(s1)
	e1 := 6

	if !reflect.DeepEqual(r1, e1) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", e1, r1)
	}

	s2 := []string{"a", "ab", "abc"}
	r2 := itertools.Sum(s2)
	e2 := "aababc"

	if !reflect.DeepEqual(r2, e2) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", e2, r2)
	}

	s3 := []Point{{1, 2}, {3, 4}, {5, 6}}
	r3 := itertools.SumIface(s3)
	e3 := Point{9, 12}

	if !reflect.DeepEqual(r3, e3) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", e3, r3)
	}

	r1c := itertools.SumC(itertools.C(s1))

	if !reflect.DeepEqual(r1c, e1) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", e1, r1)
	}

	r2c := itertools.SumC(itertools.C(s2))

	if !reflect.DeepEqual(r2c, e2) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", e2, r2)
	}

	r3c := itertools.SumIfaceC(itertools.C(s3))

	if !reflect.DeepEqual(r3c, e3) {
		t.Fatalf("the result did not match with the expected slice: expect=%v, actual=%v", e3, r3)
	}
}
