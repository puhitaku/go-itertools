package itertools

// Product2 generates a product of elements in the slices.
func Product2[T1, T2 any](s1 []T1, s2 []T2) []Tuple2[T1, T2] {
	var s []Tuple2[T1, T2]

	for i1 := range s1 {
		for i2 := range s2 {
			s = append(s, Tuple2[T1, T2]{V1: s1[i1], V2: s2[i2]})
		}
	}

	return s
}

// Product2C is an alternative to Product2 that inputs/outputs channels.
// The output is not synchronized to the input; elements from c1 and c2 are buffered
// until all input channels close.
func Product2C[T1, T2 any](c1 <-chan T1, c2 <-chan T2) <-chan Tuple2[T1, T2] {
	// TODO: I suspect that product can be synchronous to the input (emit product every time it receives new values.)
	c := make(chan Tuple2[T1, T2])

	go func() {
		defer close(c)

		s1, s2 := ToSlice(c1), ToSlice(c2)
		for _, t := range Product2(s1, s2) {
			c <- t
		}
	}()

	return c
}

// Product3 generates a product of elements in the slices.
func Product3[T1, T2, T3 any](s1 []T1, s2 []T2, s3 []T3) []Tuple3[T1, T2, T3] {
	var s []Tuple3[T1, T2, T3]

	for i1 := range s1 {
		for i2 := range s2 {
			for i3 := range s3 {
				s = append(s, Tuple3[T1, T2, T3]{V1: s1[i1], V2: s2[i2], V3: s3[i3]})
			}
		}
	}

	return s
}

// Product3C is an alternative to Product3 that inputs/outputs channels.
// The output is not synchronized to the input; elements from c1 ~ c3 are buffered
// until all input channels close.
func Product3C[T1, T2, T3 any](c1 <-chan T1, c2 <-chan T2, c3 <-chan T3) <-chan Tuple3[T1, T2, T3] {
	// TODO: replace with more efficient and realtime algorithm
	c := make(chan Tuple3[T1, T2, T3])

	go func() {
		defer close(c)

		s1, s2, s3 := ToSlice(c1), ToSlice(c2), ToSlice(c3)
		for _, t := range Product3(s1, s2, s3) {
			c <- t
		}
	}()

	return c
}

// Product4 generates a product of elements in the slices.
func Product4[T1, T2, T3, T4 any](s1 []T1, s2 []T2, s3 []T3, s4 []T4) []Tuple4[T1, T2, T3, T4] {
	var s []Tuple4[T1, T2, T3, T4]

	for i1 := range s1 {
		for i2 := range s2 {
			for i3 := range s3 {
				for i4 := range s4 {
					s = append(s, Tuple4[T1, T2, T3, T4]{V1: s1[i1], V2: s2[i2], V3: s3[i3], V4: s4[i4]})
				}
			}
		}
	}

	return s
}

// Product4C is an alternative to Product4 that inputs/outputs channels.
// The output is not synchronized to the input; elements from c1 ~ c4 are buffered
// until all input channels close.
func Product4C[T1, T2, T3, T4 any](c1 <-chan T1, c2 <-chan T2, c3 <-chan T3, c4 <-chan T4) <-chan Tuple4[T1, T2, T3, T4] {
	// TODO: replace with more efficient and realtime algorithm
	c := make(chan Tuple4[T1, T2, T3, T4])

	go func() {
		defer close(c)

		s1, s2, s3, s4 := ToSlice(c1), ToSlice(c2), ToSlice(c3), ToSlice(c4)
		for _, t := range Product4(s1, s2, s3, s4) {
			c <- t
		}
	}()

	return c
}

// Permutations generates permutations of the slice.
func Permutations[T any](iter []T, r int) [][]T {
	return ToSlice(PermutationsC(ToChan(iter), r))
}

// PermutationsC is an alternative to Permutations that inputs/outputs channels.
// The output is not synchronized to the input.
func PermutationsC[T any](iterC <-chan T, r int) chan []T {
	iter := ToSlice(iterC)
	c := make(chan []T)
	var indices []int

	yield := func() {
		buf := make([]T, r)
		for i := 0; i < r; i++ {
			buf[i] = iter[indices[i]]
		}
		c <- buf
	}

	go func() {
		// Ported from https://docs.python.org/ja/3/library/itertools.html#itertools.permutations
		defer close(c)

		n := len(iter)

		if r == 0 {
			r = n
		}

		if r > n {
			return
		}

		indices = make([]int, n)
		for i := range indices {
			indices[i] = i
		}

		cycles := make([]int, r)
		for i := range cycles {
			cycles[i] = n-i
		}

		yield()

		if n == 0 {
			return
		}

outer:
		for {
			for i := r-1; i >= 0; i-- {
				cycles[i]--
				if cycles[i] == 0 {
					index := indices[i]
					for j := i; j < n-1; j++ {
						indices[j] = indices[j+1]
					}
					indices[len(indices)-1] = index
					cycles[i] = n - i
				} else {
					j := cycles[i]
					indices[i], indices[len(indices)-j] = indices[len(indices)-j], indices[i]
					yield()
					continue outer
				}
			}
			break
		}
	}()

	return c
}

// Combinations generates combinations of the slice.
func Combinations[T any](iter []T, r int) [][]T {
	return ToSlice(CombinationsC(ToChan(iter), r))
}

// CombinationsC is an alternative to Combinations that inputs/outputs channels.
// The output is not synchronized to the input.
func CombinationsC[T any](iterC <-chan T, r int) chan []T {
	iter := ToSlice(iterC)
	c := make(chan []T)
	var indices []int

	yield := func() {
		buf := make([]T, r)
		for i := 0; i < r; i++ {
			buf[i] = iter[indices[i]]
		}
		c <- buf
	}

	go func() {
		// Ported from https://docs.python.org/ja/3/library/itertools.html#itertools.combinations
		defer close(c)

		n := len(iter)

		if r > n {
			return
		}

		indices = make([]int, n)
		for i := range indices {
			indices[i] = i
		}

		yield()

		for {
			i := r - 1
			for ; i >= 0; i-- {
				if indices[i] != i + n - r {
					break
				}
			}
			if i < 0 {
				return
			}
			indices[i] += 1
			for j := i+1; j < r; j++ {
				indices[j] = indices[j-1] + 1
			}
			yield()
		}
	}()

	return c
}

// CombinationsWithReplacement generates combinations that contains repeated values.
func CombinationsWithReplacement[T any](iter []T, r int) [][]T {
	return ToSlice(CombinationsWithReplacementC(iter, r))
}

// CombinationsWithReplacementC is an alternative to CombinationsWithReplacement that inputs/outputs channels.
func CombinationsWithReplacementC[T any](iter []T, r int) chan []T {
	c := make(chan []T)
	var indices []int

	yield := func() {
		buf := make([]T, r)
		for i := 0; i < r; i++ {
			buf[i] = iter[indices[i]]
		}
		c <- buf
	}

	go func() {
		// Ported from https://docs.python.org/ja/3/library/itertools.html#itertools.combinations_with_replacement
		defer close(c)

		n := len(iter)

		if n == 0 && r > 0 {
			return
		}

		indices = make([]int, r)

		yield()

		for {
			i := r - 1
			for ; i >= 0; i-- {
				if indices[i] != n - 1 {
					break
				}
			}
			if i < 0 {
				return
			}
			index := indices[i]
			for j := i; j < r; j++ {
				indices[j] = index + 1
			}
			yield()
		}
	}()

	return c
}
