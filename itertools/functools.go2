package itertools

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
)

// LRUComparable is a Least Recent Use cache of calls to fn
// equivalent to functools.lru_cache in Python.
//
// The type of the function argument must be a Comparable.
// Refer to /itertools/types.go2 for the definition of Comparable.
type LRUComparable[T Comparable, U any] struct {
	fn func(T) U
	cache map[T]U
	age map[T]int
	maxSize int
}

// WrapLRUComparable wraps given function with LRUComparable.
// It'll save up to maxSize calls (unique).
func WrapLRUComparable[T Comparable, U any](fn func(T) U, maxSize int) *LRUComparable[T, U] {
	return &LRUComparable[T, U]{
		fn: fn,
		cache: map[T]U{},
		age: map[T]int{},
		maxSize: maxSize,
	}
}

// Call returns the result of a call to the wrapped function.
// It calls the function only if a call with given arg is not cached.
func (l *LRUComparable[T, U]) Call(arg T) U {
	var ret U

	cv, ok := l.cache[arg]
	if ok {
		ret = cv
	} else {
		ret = l.fn(arg)
		l.cache[arg] = ret
	}

	l.age[arg] = -1

	for k := range l.age {
		l.age[k] += 1
	}

	if len(l.age) > l.maxSize {
		var mk T
		var ma int

		for k, age := range l.age {
			if ma < age {
				mk, ma = k, age
			}
		}

		delete(l.cache, mk)
		delete(l.age, mk)
	}

	return ret
}

// LRUAny is a Least Recent Use cache of calls to fn
// equivalent to functools.lru_cache in Python.
//
// Any type is allowed for the function argument.
// It hashes given arg with fmt.Sprintf("%#v", arg).
// Please keep in mind that fmt.Sprintf may produce a very long string representation.
// To customize how it get hashed, use LRUHashable instead.
type LRUAny[T, U any] struct {
	fn func(T) U
	cache map[string]U
	age map[string]int
	maxSize int
}

// WrapLRUAny wraps given function with LRUAny.
// It'll save up to maxSize calls (unique).
func WrapLRUAny[T, U any](fn func(T) U, maxSize int) *LRUAny[T, U] {
	return &LRUAny[T, U]{
		fn: fn,
		cache: map[string]U{},
		age: map[string]int{},
		maxSize: maxSize,
	}
}

func (l *LRUAny[T, U]) Call(arg T) U {
	var ret U
	var sha = sha256.Sum256([]byte(fmt.Sprintf("%#v", arg)))
	var hashed = hex.EncodeToString(sha[:])

	cv, ok := l.cache[hashed]
	if ok {
		ret = cv
	} else {
		ret = l.fn(arg)
		l.cache[hashed] = ret
	}

	l.age[hashed] = -1

	for k := range l.age {
		l.age[k] += 1
	}

	if len(l.age) > l.maxSize {
		var mk string
		var ma int

		for k, age := range l.age {
			if ma < age {
				mk, ma = k, age
			}
		}

		delete(l.cache, mk)
		delete(l.age, mk)
	}

	return ret
}

// Hashable is an interface of hashable types.
type Hashable[T any] interface {
	Hash() []byte
}

// LRUHashable is a Least Recent Use cache of calls to fn
// equivalent to functools.lru_cache in Python.
//
// The types that implement Hashable are allowed for the function argument.
// It hashes given arg with arg.Hash().
type LRUHashable[T Hashable[T], U any] struct {
	fn func(T) U
	cache map[string]U
	age map[string]int
	maxSize int
}

// WrapLRUHashable wraps given function with LRUHashable.
// It'll save up to maxSize calls (unique).
func WrapLRUHashable[T Hashable[T], U any](fn func(T) U, maxSize int) *LRUHashable[T, U] {
	return &LRUHashable[T, U]{
		fn: fn,
		cache: map[string]U{},
		age: map[string]int{},
		maxSize: maxSize,
	}
}

func (l *LRUHashable[T, U]) Call(arg Hashable[T]) U {
	var ret U
	var hashed = hex.EncodeToString(arg.Hash())

	cv, ok := l.cache[hashed]
	if ok {
		ret = cv
	} else {
		// Assertability of arg (Hashable[T]) to T is guaranteed in build time
		// because T must implement Hashable in order to instantiate generic LRUHashable[T, U]
		ret = l.fn(arg.(T))
		l.cache[hashed] = ret
	}

	l.age[hashed] = -1

	for k := range l.age {
		l.age[k] += 1
	}

	if len(l.age) > l.maxSize {
		var mk string
		var ma int

		for k, age := range l.age {
			if ma < age {
				mk, ma = k, age
			}
		}

		delete(l.cache, mk)
		delete(l.age, mk)
	}

	return ret
}

// Reduce applies the function cumulatively on the slice and reduces it into a single value.
// It returns init if the slice has no element.
func Reduce[T any](fn func(T, T) T, it []T, init T) T {
	accum := init

	for i := range it {
		accum = fn(accum, it[i])
	}

	return accum
}

// ReduceC applies the function cumulatively on the channel and reduces it into a single value.
// It returns init if no values are received from the channel.
func ReduceC[T any](fn func(T, T) T, it <-chan T, init T) T {
	accum := init

	for v := range it {
		accum = fn(accum, v)
	}

	return accum
}
