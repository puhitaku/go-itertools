// infinite: Inifinite iterators
// Functions declared here have different naming convention that
// they generally have no "C" in the end of their name even they output channels.

package itertools

import (
	"context"
)

// Count counts up a value from "start" and emits it infinitely.
// Bulit-in types that implements increment operator (++) are only supported.
// TODO: implement CountIface
func Count[T Incrementable](start T) chan T {
	c := make(chan T)
	v := start
	go func() {
		for {
			c <- v
			v++
		}
	}()
	return c
}

// CountWithContext is an alternative to Count that obeys a context.
func CountWithContext[T Incrementable](start T, ctx context.Context) chan T {
	c := make(chan T)
	v := start
	go func() {
		defer close(c)

		for {
			select {
			case <-ctx.Done():
				return
			case c <- v:
				// go ahead!
			}
			v++
		}
	}()
	return c
}

// Cycle emits the elements in the slice infinitely.
func Cycle[T any](iter []T) chan T {
	c := make(chan T)
	go func() {
		for {
			for _, v := range iter {
				c <- v
			}
		}
	}()
	return c
}

// CycleWithContext is an alternative of Cycle that obeys a context.
func CycleWithContext[T any](iter []T, ctx context.Context) chan T {
	c := make(chan T)
	go func() {
		defer close(c)

		for {
			for _, v := range iter {
				select {
				case <-ctx.Done():
					return
				case c <- v:
					// go ahead!
				}
			}
		}
	}()
	return c
}

// CycleC is an alternative of Cycle that inputs a channel.
// The output is synchronized to the input and repeats it infinitely.
func CycleC[T any](iter <-chan T) chan T {
	c := make(chan T)
	buf := []T{}

	go func() {
		for v := range iter {
			buf = append(buf, v)
			c <- v
		}

		for {
			for i := range buf {
				c <- buf[i]
			}
		}
	}()
	return c
}

// CycleCWithContext is an alternative of CycleC that obeys a context.
// The output is synchronized to the input and repeats it infinitely.
func CycleCWithContext[T any](iter <-chan T, ctx context.Context) chan T {
	c := make(chan T)
	buf := []T{}

	go func() {
		defer close(c)

		for v := range iter {
			buf = append(buf, v)
			select {
			case <-ctx.Done():
				return
			case c <- v:
			}
		}

		for {
			for i := range buf {
				select {
				case <-ctx.Done():
					return
				case c <- buf[i]:
				}
			}
		}
	}()
	return c
}

// Repeat repeats the argument value.
// The output channel will be finite if n > 0 and infinite if n == 0.
func Repeat[T any](v T, n int) chan T {
	c := make(chan T)
	go func() {
		defer close(c)
		for i := 0; n == 0 || i < n; i++ {
			c <- v
		}
	}()
	return c
}

// RepeatWithContext is an alternative of Repeat that obeys a context.
// The output channel will be finite if n > 0 and infinite if n == 0.
func RepeatWithContext[T any](v T, n int, ctx context.Context) chan T {
	c := make(chan T)
	go func() {
		defer close(c)
		for i := 0; n == 0 || i < n; i++ {
			select {
			case <-ctx.Done():
				return
			case c <- v:
			}
		}
	}()
	return c
}
