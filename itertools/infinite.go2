// infinite: Inifinite iterators

package itertools

func Count[T Incrementable](start T) chan T {
	c := make(chan T)
	v := start
	go func() {
		for {
			for {
				c <- v
				v++
			}
		}
	}()
	return c
}

func Cycle[T any](iter <-chan T) chan T {
	c := make(chan T)
	buf := []T{}

	go func() {
		for v := range iter {
			buf = append(buf, v)
			c <- v
		}

		for {
			for i := range buf {
				c <- buf[i]
			}
		}
	}()
	return c
}

func CycleS[T any](iter []T) chan T {
	c := make(chan T)
	go func() {
		for {
			for _, v := range iter {
				c <- v
			}
		}
	}()
	return c
}

func Repeat[T any](v T, n int) chan T {
	c := make(chan T)
	go func() {
		for i := 0; i < n; i++ {
			c <- v
		}
		close(c)
	}()
	return c
}
