package main

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"reflect"
	"testing"

	"github.com/puhitaku/go2-itertools/itertools"
)

func TestFunctools(t *testing.T) {
	t.Run("LRUCache", testLRUCache)
	t.Run("LRUCacheArbitrary", testLRUCacheArbitrary)
}

func testLRUCache(t *testing.T) {
	calls := map[int]int{}

	fn := func(arg int) int {
		_, ok := calls[arg]
		if ok {
			calls[arg] += 1
		} else {
			calls[arg] = 1
		}
		return 10*arg
	}

	lru := itertools.NewLRUCache(fn, 2)

	val := lru.Call(1)
	if val != 10 {
		t.Fatalf("unexpected ret val: expected=10, actual=%v", val)
	}
	val = lru.Call(2)
	if val != 20 {
		t.Fatalf("unexpected ret val: expected=20, actual=%v", val)
	}
	val = lru.Call(1)
	if val != 10 {
		t.Fatalf("unexpected ret val: expected=10, actual=%v", val)
	}
	val = lru.Call(2)
	if val != 20 {
		t.Fatalf("unexpected ret val: expected=20, actual=%v", val)
	}

	expectCall := map[int]int{1: 1, 2: 1}
	if !reflect.DeepEqual(expectCall, calls) {
		t.Fatalf("unexpected cache state: expected=%v, actual=%v", expectCall, calls)
	}

	expectAge := map[int]int{1: 1, 2: 0}
	if !reflect.DeepEqual(expectAge, lru.GetAge()) {
		t.Fatalf("unexpected cache state: expected=%v, actual=%v", expectAge, calls)
	}

	val = lru.Call(1)
	if val != 10 {
		t.Fatalf("unexpected ret val: expected=10, actual=%v", val)
	}
	val = lru.Call(3)
	if val != 30 {
		t.Fatalf("unexpected ret val: expected=10, actual=%v", val)
	}
	val = lru.Call(3)
	if val != 30 {
		t.Fatalf("unexpected ret val: expected=10, actual=%v", val)
	}

	expectCall = map[int]int{1: 1, 2:1, 3: 1}
	if !reflect.DeepEqual(expectCall, calls) {
		t.Fatalf("unexpected cache state: expected=%v, actual=%v", expectCall, calls)
	}

	expectAge = map[int]int{1: 2, 3: 0}
	if !reflect.DeepEqual(expectAge, lru.GetAge()) {
		t.Fatalf("unexpected cache state: expected=%v, actual=%v", expectAge, calls)
	}
}

type Struct struct {
	Name string
}

func testLRUCacheArbitrary(t *testing.T) {
	one, two, three := Struct{Name: "1"}, Struct{Name: "2"}, Struct{Name: "3"}
	//oneh, twoh, threeh := fmt.Sprintf("%#v", one), fmt.Sprintf("%#v", two), fmt.Sprintf("%#v", three)
	ones := sha256.Sum256([]byte(fmt.Sprintf("%#v", one)))
	oneh := hex.EncodeToString(ones[:])
	twos := sha256.Sum256([]byte(fmt.Sprintf("%#v", two)))
	twoh := hex.EncodeToString(twos[:])
	threes := sha256.Sum256([]byte(fmt.Sprintf("%#v", three)))
	threeh := hex.EncodeToString(threes[:])

	fmt.Println(oneh, twoh, threeh)

	calls := map[Struct]int{}

	fn := func(arg Struct) string {
		_, ok := calls[arg]
		if ok {
			calls[arg] += 1
		} else {
			calls[arg] = 1
		}
		return arg.Name + arg.Name
	}

	lru := itertools.NewLRUCacheArbitrary(fn, 2)

	val := lru.Call(one)
	if val != "11" {
		t.Fatalf("unexpected ret val: expected=11, actual=%v", val)
	}
	val = lru.Call(two)
	if val != "22" {
		t.Fatalf("unexpected ret val: expected=22, actual=%v", val)
	}
	val = lru.Call(one)
	if val != "11" {
		t.Fatalf("unexpected ret val: expected=11, actual=%v", val)
	}
	val = lru.Call(two)
	if val != "22" {
		t.Fatalf("unexpected ret val: expected=22, actual=%v", val)
	}

	expectCall := map[Struct]int{one: 1, two: 1}
	if !reflect.DeepEqual(expectCall, calls) {
		t.Fatalf("unexpected cache state: expected=%v, actual=%v", expectCall, calls)
	}

	expectAge := map[string]int{oneh: 1, twoh: 0}
	if !reflect.DeepEqual(expectAge, lru.GetAge()) {
		t.Fatalf("unexpected cache state: expected=%v, actual=%v", expectAge, calls)
	}

	val = lru.Call(one)
	if val != "11" {
		t.Fatalf("unexpected ret val: expected=11, actual=%v", val)
	}
	val = lru.Call(three)
	if val != "33" {
		t.Fatalf("unexpected ret val: expected=33, actual=%v", val)
	}
	val = lru.Call(three)
	if val != "33" {
		t.Fatalf("unexpected ret val: expected=33, actual=%v", val)
	}

	expectCall = map[Struct]int{one: 1, two: 1, three: 1}
	if !reflect.DeepEqual(expectCall, calls) {
		t.Fatalf("unexpected cache state: expected=%v, actual=%v", expectCall, calls)
	}

	expectAge = map[string]int{oneh: 2, threeh: 0}
	if !reflect.DeepEqual(expectAge, lru.GetAge()) {
		t.Fatalf("unexpected cache state: expected=%v, actual=%v", expectAge, calls)
	}
}
